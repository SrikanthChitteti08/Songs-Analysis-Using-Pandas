# -*- coding: utf-8 -*-
"""Songs With Pandas V2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VPTzX_b8ln57wcCnMZ9hVLIe77imFdRm

## **1. Importing Libraries**
### **--->** Essential python libraries for data analytics.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm

"""## **2. Load The Dataset**
#### **--->** Import songs dataset from a CSV file into a pandas DataFrame.
"""

df = pd.read_csv('/content/songs.csv')

"""## **3. Data Overview and Summary**
###  **---> 3.1) Check the first few rows**

"""

df.head()

"""### **---> 3.2) Check the dimension of the data**"""

df.shape

"""### **---> 3.3) Check column names and data types**"""

df.info()

"""### **---> 3.4) Check descriptive statistics in a dataframe**

"""

df.describe()

"""## **4. Exploratory Data Analysis(EDA)**


* **'EDA'** is the art of unveiling **insights**, **patterns**, and anomalies within datasets.The general steps are:
  * 	**Data Cleaning & Preprocessing**
  * 	**Statistical Analysis**
  * 	**Univariate Analysis & Visualization**
  * 	**Bivariate Analysis & Visualization**
  * 	**Interpretation of Results**

            Let's go through each step in detail.

### **---> 4.1) Data Cleaning and Preprocessing**
  * 	**Check for missing values in each column**
"""

df.isnull().sum()

df.head()

"""  * **Check for duplicates in a dataset or columns**"""

df.duplicated().sum()

"""* **It's one of the approach to finding duplicate values**"""

len(df['link']) - df['link'].nunique()

df['link'].duplicated().sum()

"""* **Remove duplicated rows**"""

df.drop_duplicates(subset = ['link'], inplace = True)

df['link'].duplicated().sum()

"""##  **5. Data Transformation And Analysis**

* **It filters the DataFrame to select only rows where the 'language' column is 'Urdu'.**
"""

df[df['language'] == 'Urdu']

"""* **It counts the number of rows in the DataFrame where the 'language' column is 'Urdu'.**"""

(df['language'] == 'Urdu').sum()

"""**Using for loop:**
* Initializing a counter variable (count) to 0.
* Looping through each value in the 'language' column.
* If the current value is "Telugu", it increments the counter.
"""

count = 0
for i in df['language']:

  if i == 'Telugu':
    count += 1

print(count)

"""**Using Nested loop:**

* Calculating the frequency of each language in the dataset. It does this using two nested loops: the outer loop iterates through unique languages, while the inner loop counts of each language within the entire column.
"""

for language in df['language'].unique():
  count = 0

  for i in df['language']:

    if language == i:
      count += 1

  print(language,count)

"""**Using Inbuilt function:**
* It shows all the unique languages and frequency how many times language appears in a dataset it will counts automatically by using inbuilt function.
"""

df['language'].value_counts()

"""**Cleaning in duration column :**
* Duration Column Contains String datatype i can't change the datatype because it having colon in every row. Extracting the duration in seconds from the 'duration' column and creating a new 'duration_in_sec' column.
"""

df['duration']

df['duration'][0].split(':')

mint = int(df['duration'][0].split(':')[0])
sec  = int(df['duration'][0].split(':')[1])

print(mint, sec)

for duration in df['duration']:
  if len(duration.split(':')) != 2:

    print(duration)

"""* **Extract minutes in a duration column and to convert minutes into seconds for every the rows in a dataframe**"""

durations = []

for duration in df['duration']:

  if (len(duration.split(':'))) == 2:

    mint = int(duration.split(':')[0])
    sec  = int(duration.split(':')[1])

    durations.append( mint * 60 + sec)

  else :

    hour = int(duration.split(':')[0])
    mint = int(duration.split(':')[1])
    sec  = int(duration.split(':')[2])

    durations.append(hour * 3600 + mint * 60 + sec)

"""* **Created a column 'duration_in_sec' and imported the seconds in a new column**"""

df['duration_in_sec'] = durations

df

"""* **Finding the Longest duration in duration_in_sec column**"""

df['duration_in_sec'].max()

df[df['duration_in_sec'] == 25680]

df.head()

"""* **Extract and Flatten:**

 This line uses a nested list comprehension to extract individual singer names from the 'singer' column. It iterates through each unique value in the column, splits it using the pipe symbol '|', and flattens the resulting list of names into a single list called singers.
"""

singers = []

for singer in df['singer'].unique():
  singers += singer.split('|')

singers = list(set(singers))

len(singers)

"""* **Calculates the frequency for unique singers how many times singers appears in a dataset**"""

from tqdm import tqdm

song_frq = []

for singer in tqdm(singers):
  c = 0
  for i in df['singer']:

    if singer in (i.split('|')):
      c += 1

  song_frq.append([singer, c])

"""* **Created a Dataframe most popular singers**"""

df_pr = pd.DataFrame(song_frq, columns = ['singer','freq'])

"""### **Top 10 singers over all the dataset**"""

top_singers = df_pr.sort_values(by = 'freq', ascending = False).head(10)

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

top_singers = top_singers.sort_values(by='freq', ascending=False)

palette = sns.color_palette("Blues_d", n_colors=len(top_singers))
palette = palette[::-1]

plt.figure(figsize=(10, 6))
sns.barplot(x='singer', y='freq', data=top_singers, palette=palette)
plt.xlabel("Singer")
plt.ylabel("Frequency")
plt.title("Top 10 Singers")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""* **Top 10 languages based on the frequency**"""

data = []
for language in df['language'].unique():
  count = 0

  for i in df['language']:

    if language == i:
      count += 1

  data.append([language,count])

df = pd.DataFrame(data, columns = ['language', 'freq'])

df_pr = df.sort_values(by = 'freq',ascending = False).head()

"""* **Revieling the Top 5 languages for songs dataset**"""

import matplotlib.pyplot as plt
import seaborn as sns

languages = df_pr['language']
frequencies = df_pr['freq']

palette = sns.color_palette("hls", len(languages))

explode = [0] * len(languages)
explode[frequencies.argmax()] = 0.1


plt.figure(figsize=(4, 4))
plt.pie(frequencies, labels=languages, autopct='%1.1f%%', startangle=90, colors=palette,
        explode=explode, shadow=True, wedgeprops=dict(width=0.3, edgecolor='black', linewidth=1))
plt.title("Revieling the Top 5 Languages in songs dataset")
plt.show()

